<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	metadata-complete="true" version="2.5">

	<display-name>PetClinic</display-name>

	<description>Port of Spring's PetClinic sample application to Coeus</description>

	<!--
		- Location of the XML file that defines the root application context.
		- Applied by ContextLoaderServlet.
		-
		- Can be set to:
		- "/WEB-INF/applicationContext-hibernate.xml" for the Hibernate implementation,
		- "/WEB-INF/applicationContext-jpa.xml" for the JPA one, or
		- "/WEB-INF/applicationContext-jdbc.xml" for the JDBC one.
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/spring/applicationContext-jdbc.xml
			/WEB-INF/spring/applicationContext-coeus.xml
		</param-value>
        <!--
		<param-value>/WEB-INF/spring/applicationContext-hibernate.xml</param-value>
		<param-value>/WEB-INF/spring/applicationContext-jpa.xml</param-value>
		-->

		<!--
			To use the JPA variant above, you will need to enable Spring load-time
			weaving in your server environment. Out of the box, Spring will try to
			detect the running environment and use the appropriate weaver but if that
			fails, one must enable one by hand or use the VM-wide weaver.
			See PetClinic's readme and/or Spring's JPA documentation for more information.
		-->
	</context-param>

	<!--
		- Loads the root application context of this web app at startup,
		- by default from "/WEB-INF/applicationContext.xml".
		- Note that you need to fall back to Spring's ContextLoaderServlet for
		- J2EE servers that do not follow the Servlet 2.4 initialization order.
		-
		- Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
		- to access it anywhere in the web application, outside of the framework.
		-
		- The root context is the parent of all servlet-specific contexts.
		- This means that its beans are automatically available in these child contexts,
		- both for getBean(name) calls and (external) bean references.
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!--
		Defines the 'default' servlet (usually for service static resources).
		Uncomment this in containers (GlassFish) that do not declare this 
		implicit definition out of the box, or change the name of the servlet mapping 
		below to the appropriate one.
		
	<servlet>
		<servlet-name>default</servlet-name>
		<servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
		<init-param>
			<param-name>debug</param-name>
			<param-value>0</param-value>
		</init-param>
		<init-param>
			<param-name>listings</param-name>
			<param-value>false</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	-->
	<!--
	 - Map static resources to the default servlet
	 - examples:
	 -     http://localhost:8080/static/images/pets.png
	 -     http://localhost:8080/static/styles/petclinic.css
	-->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>/static/*</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>petclinic</servlet-name>
		<servlet-class>com.tzavellas.coeus.core.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>web-module</param-name>
			<param-value>petclinic.web.PetclinicModule</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>petclinic</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>

	<!-- 
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<location>/WEB-INF/jsp/uncaughtException.jsp</location>
	</error-page>
	 -->

	<!-- eliminate welcome files -->
	<!-- useful for Servlet 3 container (Tomcat 7 and Jetty 6) -->
	<welcome-file-list>
		<welcome-file></welcome-file>
	</welcome-file-list>

	<!--
		- Reference to PetClinic database.
		- Only needed if not using a local DataSource but a JNDI one instead.
	-->
	<!--
	<resource-ref>
		<res-ref-name>jdbc/petclinic</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>
	-->
	
</web-app>